You will write a program to figure out the most common word length of words from a file. To solve this problem you will need to keep track of how many words from a file are of each
possible length. You should group all words of length 30 or more together, and you should not count basic punctuation that are the first or last characters of a group of characters.
If a word has a nonletter as the first or last character, it should not be counted as part of the word length. For example, the word And, would be considered of
length 3 (the comma is not counted), the word “bluejeans” would be considered of length 10 (the double quotes are not counted, but the hyphen is).
Note that we will miscount some words, such as “Hello,” which will be counted as 6 since we don’t count the double quotes but will count the comma,
but that is OK as there should not be many words in that category.
Write a method indexOfMax that has one parameter named values that is an integer array. This method returns the index position of the largest element in values . Then add
code to the method testCountWordLengths to call indexOfMax to determine the most common word length in the file. For example, calling indexOfMax after calling
countWordLengths on the file smallHamlet.txt should return 3.
First test your program on a small file, such as this simple file shown called smallHamlet.txt :
Laer. My necessaries are embark'd. Farewell.
And, sister, as the winds give benefit
Note this file has words that are:
2 words of length 2: My as
3 words of length 3: are And the
2 words of length 4: Laer give
1 word of length 5: winds
1 word of length 6: sister
1 word of length 7: benefit
2 words of length 8: embark’d Farewell
1 word of length 11: necessaries
Assignment 2: Caesar Cipher Two Keys Decrypt
You should start by writing the decryption method explained in the lesson that decrypts a message that was encrypted with one key, using statistical letter frequencies of English text.
Then you will add code to be able to decrypt a message that was encrypted with two keys, using ideas from the single key decryption method and the encryption with two keys method
from the program you wrote in the last lesson. Idea for two keys decrypt method. Recall that in using two keys, key1 and key2 , key1 was
used to encrypt every other character, starting with the first, of the String, and key2 was used to encrypt every other character, starting with the second. In order to decrypt the encrypted String,
it may be easier to split the String into two Strings, one String of all the letters encrypted with key1 and one String of all the letters encrypted with key2 . Then use the algorithm from the
lesson to determine the key for each String, and then use those keys and the two key encryption method to decrypt the original encrypted message.
For example, if the encrypted message was “Qbkm Zgis” , then you would split this String into two Strings: “Qk gs” , representing the characters in the odd number positions and “bmZi”
representing the characters in the even number positions. Then you would get the key for each half String and use the two key encryption method to find the message. Note this example is so
small it likely won’t find the keys, but it illustrates how to take the Strings apart. A sample file to test your program that is small with lots of e’s is called wordsLotsOfEs.txt and
shown here:
Just a test string with lots of eeeeeeeeeeeeeeeees
And the same file encrypted using keys 23 and 2 is called wordsLotsOfEsEncrypted.txt and is shown here:
Gwpv c vbuq pvokki yfve iqqu qc bgbgbgbgbgbgbgbgbu
